/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
*/

import { ServiceClientOptions, RequestOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as stream from 'stream';
import * as models from '../models';


/**
 * @class
 * Analysis
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MailosaurBaseClient.
 */
export interface Analysis {


    /**
     * @summary Perform a spam check
     *
     * Perform a spam analysis on the specified email
     *
     * @param {uuid} email The identifier of the email to be analyzed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<SpamCheckResult>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    spamWithHttpOperationResponse(email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SpamCheckResult>>;

    /**
     * @summary Perform a spam check
     *
     * Perform a spam analysis on the specified email
     *
     * @param {uuid} email The identifier of the email to be analyzed.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {SpamCheckResult} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {SpamCheckResult} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link SpamCheckResult} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    spam(email: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SpamCheckResult>;
    spam(email: string, callback: ServiceCallback<models.SpamCheckResult>): void;
    spam(email: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SpamCheckResult>): void;
}

/**
 * @class
 * Emails
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MailosaurBaseClient.
 */
export interface Emails {


    /**
     * @summary Retrieve an email
     *
     * Retrieves the detail for a single email. Simply supply the unique identifier
     * for the required email.
     *
     * @param {uuid} id The identifier of the email to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Email>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Email>>;

    /**
     * @summary Retrieve an email
     *
     * Retrieves the detail for a single email. Simply supply the unique identifier
     * for the required email.
     *
     * @param {uuid} id The identifier of the email to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Email} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Email} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Email} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Email>;
    get(id: string, callback: ServiceCallback<models.Email>): void;
    get(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Email>): void;


    /**
     * @summary Delete an email
     *
     * Permanently deletes an email. This operation cannot be undone. Also deletes
     * any attachments related to the email.
     *
     * @param {uuid} id The identifier of the email to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete an email
     *
     * Permanently deletes an email. This operation cannot be undone. Also deletes
     * any attachments related to the email.
     *
     * @param {uuid} id The identifier of the email to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(id: string, callback: ServiceCallback<void>): void;
    deleteMethod(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List all emails
     *
     * Returns a list of your emails. The emails are returned sorted by received
     * date, with the most recently-received emails appearing first.
     *
     * @param {string} server The identifier of the server hosting the emails.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.pagenumber] Used in conjunction with `itemsperpage`
     * to support pagination.
     *
     * @param {number} [options.itemsperpage] A limit on the number of results to
     * be returned. Can be set between 1 and 1000 items, the default is 50.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(server: string, options?: { pagenumber? : number, itemsperpage? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Email[]>>;

    /**
     * @summary List all emails
     *
     * Returns a list of your emails. The emails are returned sorted by received
     * date, with the most recently-received emails appearing first.
     *
     * @param {string} server The identifier of the server hosting the emails.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.pagenumber] Used in conjunction with `itemsperpage`
     * to support pagination.
     *
     * @param {number} [options.itemsperpage] A limit on the number of results to
     * be returned. Can be set between 1 and 1000 items, the default is 50.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(server: string, options?: { pagenumber? : number, itemsperpage? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.Email[]>;
    list(server: string, callback: ServiceCallback<models.Email[]>): void;
    list(server: string, options: { pagenumber? : number, itemsperpage? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Email[]>): void;


    /**
     * @summary Delete all emails
     *
     * Permanently deletes all emails held by the specified server. This operation
     * cannot be undone. Also deletes any attachments related to each email.
     *
     * @param {string} server The identifier of the server to be emptied.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAllWithHttpOperationResponse(server: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete all emails
     *
     * Permanently deletes all emails held by the specified server. This operation
     * cannot be undone. Also deletes any attachments related to each email.
     *
     * @param {string} server The identifier of the server to be emptied.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAll(server: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAll(server: string, callback: ServiceCallback<void>): void;
    deleteAll(server: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Search for emails
     *
     * Returns a list of emails matching the specified search criteria. The emails
     * are returned sorted by received date, with the most recently-received emails
     * appearing first.
     *
     * @param {string} server The identifier of the server hosting the emails.
     *
     * @param {object} criteria The search criteria to match results against.
     *
     * @param {string} [criteria.sentTo] The full email address to which the target
     * email was sent.
     *
     * @param {string} [criteria.subject] The value to seek within the target
     * email's subject line.
     *
     * @param {string} [criteria.body] The value to seek within the target email's
     * HTML or text body.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.pagenumber] Used in conjunction with `itemsperpage`
     * to support pagination.
     *
     * @param {number} [options.itemsperpage] A limit on the number of results to
     * be returned. Can be set between 1 and 1000 items, the default is 50.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    searchWithHttpOperationResponse(server: string, criteria: models.SearchCriteria, options?: { pagenumber? : number, itemsperpage? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Email[]>>;

    /**
     * @summary Search for emails
     *
     * Returns a list of emails matching the specified search criteria. The emails
     * are returned sorted by received date, with the most recently-received emails
     * appearing first.
     *
     * @param {string} server The identifier of the server hosting the emails.
     *
     * @param {object} criteria The search criteria to match results against.
     *
     * @param {string} [criteria.sentTo] The full email address to which the target
     * email was sent.
     *
     * @param {string} [criteria.subject] The value to seek within the target
     * email's subject line.
     *
     * @param {string} [criteria.body] The value to seek within the target email's
     * HTML or text body.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.pagenumber] Used in conjunction with `itemsperpage`
     * to support pagination.
     *
     * @param {number} [options.itemsperpage] A limit on the number of results to
     * be returned. Can be set between 1 and 1000 items, the default is 50.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    search(server: string, criteria: models.SearchCriteria, options?: { pagenumber? : number, itemsperpage? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.Email[]>;
    search(server: string, criteria: models.SearchCriteria, callback: ServiceCallback<models.Email[]>): void;
    search(server: string, criteria: models.SearchCriteria, options: { pagenumber? : number, itemsperpage? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Email[]>): void;


    /**
     * @summary Wait for a specific email
     *
     * Returns as soon as an email matching the specified search criteria is found.
     *
     * @param {string} server The identifier of the server hosting the email.
     *
     * @param {object} criteria The search criteria to use in order to find a
     * match.
     *
     * @param {string} [criteria.sentTo] The full email address to which the target
     * email was sent.
     *
     * @param {string} [criteria.subject] The value to seek within the target
     * email's subject line.
     *
     * @param {string} [criteria.body] The value to seek within the target email's
     * HTML or text body.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Email>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    waitForWithHttpOperationResponse(server: string, criteria: models.SearchCriteria, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Email>>;

    /**
     * @summary Wait for a specific email
     *
     * Returns as soon as an email matching the specified search criteria is found.
     *
     * @param {string} server The identifier of the server hosting the email.
     *
     * @param {object} criteria The search criteria to use in order to find a
     * match.
     *
     * @param {string} [criteria.sentTo] The full email address to which the target
     * email was sent.
     *
     * @param {string} [criteria.subject] The value to seek within the target
     * email's subject line.
     *
     * @param {string} [criteria.body] The value to seek within the target email's
     * HTML or text body.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Email} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Email} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Email} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    waitFor(server: string, criteria: models.SearchCriteria, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Email>;
    waitFor(server: string, criteria: models.SearchCriteria, callback: ServiceCallback<models.Email>): void;
    waitFor(server: string, criteria: models.SearchCriteria, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Email>): void;
}

/**
 * @class
 * Files
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MailosaurBaseClient.
 */
export interface Files {


    /**
     * @summary Download an attachment
     *
     * Returns a list of your emails. The emails are returned sorted by received
     * date, with the most recently-received emails appearing first.
     *
     * @param {uuid} id The identifier of the file to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getAttachmentWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Download an attachment
     *
     * Returns a list of your emails. The emails are returned sorted by received
     * date, with the most recently-received emails appearing first.
     *
     * @param {uuid} id The identifier of the file to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getAttachment(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    getAttachment(id: string, callback: ServiceCallback<stream.Readable>): void;
    getAttachment(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;


    /**
     * @summary Download raw
     *
     * Returns a list of your emails. The emails are returned sorted by received
     * date, with the most recently-received emails appearing first.
     *
     * @param {uuid} id The identifier of the file to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Object>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getEmailWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<stream.Readable>>;

    /**
     * @summary Download raw
     *
     * Returns a list of your emails. The emails are returned sorted by received
     * date, with the most recently-received emails appearing first.
     *
     * @param {uuid} id The identifier of the file to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Object} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Object} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    getEmail(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<stream.Readable>;
    getEmail(id: string, callback: ServiceCallback<stream.Readable>): void;
    getEmail(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<stream.Readable>): void;
}

/**
 * @class
 * Messages
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MailosaurBaseClient.
 */
export interface Messages {


    /**
     * @summary Retrieve an message
     *
     * Retrieves the detail for a single message. Simply supply the unique
     * identifier for the required message.
     *
     * @param {uuid} id The identifier of the message to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Message>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Message>>;

    /**
     * @summary Retrieve an message
     *
     * Retrieves the detail for a single message. Simply supply the unique
     * identifier for the required message.
     *
     * @param {uuid} id The identifier of the message to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Message} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Message} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Message} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Message>;
    get(id: string, callback: ServiceCallback<models.Message>): void;
    get(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Message>): void;


    /**
     * @summary Delete an message
     *
     * Permanently deletes an message. This operation cannot be undone. Also
     * deletes any attachments related to the message.
     *
     * @param {uuid} id The identifier of the message to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete an message
     *
     * Permanently deletes an message. This operation cannot be undone. Also
     * deletes any attachments related to the message.
     *
     * @param {uuid} id The identifier of the message to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(id: string, callback: ServiceCallback<void>): void;
    deleteMethod(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary List all messages
     *
     * Returns a list of your messages. The messages are returned sorted by
     * received date, with the most recently-received messages appearing first.
     *
     * @param {string} server The identifier of the server hosting the messages.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.pagenumber] Used in conjunction with `itemsperpage`
     * to support pagination.
     *
     * @param {number} [options.itemsperpage] A limit on the number of results to
     * be returned. Can be set between 1 and 1000 items, the default is 50.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(server: string, options?: { pagenumber? : number, itemsperpage? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Message[]>>;

    /**
     * @summary List all messages
     *
     * Returns a list of your messages. The messages are returned sorted by
     * received date, with the most recently-received messages appearing first.
     *
     * @param {string} server The identifier of the server hosting the messages.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.pagenumber] Used in conjunction with `itemsperpage`
     * to support pagination.
     *
     * @param {number} [options.itemsperpage] A limit on the number of results to
     * be returned. Can be set between 1 and 1000 items, the default is 50.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(server: string, options?: { pagenumber? : number, itemsperpage? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.Message[]>;
    list(server: string, callback: ServiceCallback<models.Message[]>): void;
    list(server: string, options: { pagenumber? : number, itemsperpage? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Message[]>): void;


    /**
     * @summary Delete all messages
     *
     * Permanently deletes all messages held by the specified server. This
     * operation cannot be undone. Also deletes any attachments related to each
     * message.
     *
     * @param {string} server The identifier of the server to be emptied.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteAllWithHttpOperationResponse(server: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete all messages
     *
     * Permanently deletes all messages held by the specified server. This
     * operation cannot be undone. Also deletes any attachments related to each
     * message.
     *
     * @param {string} server The identifier of the server to be emptied.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteAll(server: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteAll(server: string, callback: ServiceCallback<void>): void;
    deleteAll(server: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


    /**
     * @summary Search for messages
     *
     * Returns a list of messages matching the specified search criteria. The
     * messages are returned sorted by received date, with the most
     * recently-received messages appearing first.
     *
     * @param {string} server The identifier of the server hosting the messages.
     *
     * @param {object} criteria The search criteria to match results against.
     *
     * @param {string} [criteria.sentTo] The full email address to which the target
     * email was sent.
     *
     * @param {string} [criteria.subject] The value to seek within the target
     * email's subject line.
     *
     * @param {string} [criteria.body] The value to seek within the target email's
     * HTML or text body.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.pagenumber] Used in conjunction with `itemsperpage`
     * to support pagination.
     *
     * @param {number} [options.itemsperpage] A limit on the number of results to
     * be returned. Can be set between 1 and 1000 items, the default is 50.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    searchWithHttpOperationResponse(server: string, criteria: models.SearchCriteria, options?: { pagenumber? : number, itemsperpage? : number, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Message[]>>;

    /**
     * @summary Search for messages
     *
     * Returns a list of messages matching the specified search criteria. The
     * messages are returned sorted by received date, with the most
     * recently-received messages appearing first.
     *
     * @param {string} server The identifier of the server hosting the messages.
     *
     * @param {object} criteria The search criteria to match results against.
     *
     * @param {string} [criteria.sentTo] The full email address to which the target
     * email was sent.
     *
     * @param {string} [criteria.subject] The value to seek within the target
     * email's subject line.
     *
     * @param {string} [criteria.body] The value to seek within the target email's
     * HTML or text body.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {number} [options.pagenumber] Used in conjunction with `itemsperpage`
     * to support pagination.
     *
     * @param {number} [options.itemsperpage] A limit on the number of results to
     * be returned. Can be set between 1 and 1000 items, the default is 50.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    search(server: string, criteria: models.SearchCriteria, options?: { pagenumber? : number, itemsperpage? : number, customHeaders? : { [headerName: string]: string; } }): Promise<models.Message[]>;
    search(server: string, criteria: models.SearchCriteria, callback: ServiceCallback<models.Message[]>): void;
    search(server: string, criteria: models.SearchCriteria, options: { pagenumber? : number, itemsperpage? : number, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Message[]>): void;


    /**
     * @summary Wait for a specific message
     *
     * Returns as soon as an message matching the specified search criteria is
     * found.
     *
     * @param {string} server The identifier of the server hosting the message.
     *
     * @param {object} criteria The search criteria to use in order to find a
     * match.
     *
     * @param {string} [criteria.sentTo] The full email address to which the target
     * email was sent.
     *
     * @param {string} [criteria.subject] The value to seek within the target
     * email's subject line.
     *
     * @param {string} [criteria.body] The value to seek within the target email's
     * HTML or text body.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Message>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    waitForWithHttpOperationResponse(server: string, criteria: models.SearchCriteria, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Message>>;

    /**
     * @summary Wait for a specific message
     *
     * Returns as soon as an message matching the specified search criteria is
     * found.
     *
     * @param {string} server The identifier of the server hosting the message.
     *
     * @param {object} criteria The search criteria to use in order to find a
     * match.
     *
     * @param {string} [criteria.sentTo] The full email address to which the target
     * email was sent.
     *
     * @param {string} [criteria.subject] The value to seek within the target
     * email's subject line.
     *
     * @param {string} [criteria.body] The value to seek within the target email's
     * HTML or text body.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Message} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Message} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Message} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    waitFor(server: string, criteria: models.SearchCriteria, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Message>;
    waitFor(server: string, criteria: models.SearchCriteria, callback: ServiceCallback<models.Message>): void;
    waitFor(server: string, criteria: models.SearchCriteria, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Message>): void;
}

/**
 * @class
 * Servers
 * __NOTE__: An instance of this class is automatically created for an
 * instance of the MailosaurBaseClient.
 */
export interface Servers {


    /**
     * @summary List all servers
     *
     * Returns a list of your virtual SMTP servers. Servers are returned sorted in
     * alphabetical order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    listWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server[]>>;

    /**
     * @summary List all servers
     *
     * Returns a list of your virtual SMTP servers. Servers are returned sorted in
     * alphabetical order.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Array} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Array} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    list(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server[]>;
    list(callback: ServiceCallback<models.Server[]>): void;
    list(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server[]>): void;


    /**
     * @summary Create a server
     *
     * Creates a new virtual SMTP server and returns it.
     *
     * @param {object} serverCreateOptions
     *
     * @param {string} [serverCreateOptions.name] A name used to identify the
     * server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    createWithHttpOperationResponse(serverCreateOptions: models.ServerCreateOptions, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * @summary Create a server
     *
     * Creates a new virtual SMTP server and returns it.
     *
     * @param {object} serverCreateOptions
     *
     * @param {string} [serverCreateOptions.name] A name used to identify the
     * server.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    create(serverCreateOptions: models.ServerCreateOptions, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    create(serverCreateOptions: models.ServerCreateOptions, callback: ServiceCallback<models.Server>): void;
    create(serverCreateOptions: models.ServerCreateOptions, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * @summary Retrieve a server
     *
     * Retrieves the detail for a single server. Simply supply the unique
     * identifier for the required server.
     *
     * @param {string} id The identifier of the server to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    getWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * @summary Retrieve a server
     *
     * Retrieves the detail for a single server. Simply supply the unique
     * identifier for the required server.
     *
     * @param {string} id The identifier of the server to be retrieved.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    get(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    get(id: string, callback: ServiceCallback<models.Server>): void;
    get(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * @summary Update a server
     *
     * Updats a single server and returns it.
     *
     * @param {string} id The identifier of the server to be updated.
     *
     * @param {object} server
     *
     * @param {string} [server.id] Unique identifier for the server.
     *
     * @param {string} [server.password] The password used for SMTP authentication.
     *
     * @param {string} [server.name] A name used to identify the server.
     *
     * @param {array} [server.users]
     *
     * @param {number} [server.emails] The current count of emails held within the
     * server.
     *
     * @param {array} [server.forwardingRules]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<Server>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    updateWithHttpOperationResponse(id: string, server: models.Server, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.Server>>;

    /**
     * @summary Update a server
     *
     * Updats a single server and returns it.
     *
     * @param {string} id The identifier of the server to be updated.
     *
     * @param {object} server
     *
     * @param {string} [server.id] Unique identifier for the server.
     *
     * @param {string} [server.password] The password used for SMTP authentication.
     *
     * @param {string} [server.name] A name used to identify the server.
     *
     * @param {array} [server.users]
     *
     * @param {number} [server.emails] The current count of emails held within the
     * server.
     *
     * @param {array} [server.forwardingRules]
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {Server} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {Server} [result]   - The deserialized result object if an error did not occur.
     *                      See {@link Server} for more information.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    update(id: string, server: models.Server, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.Server>;
    update(id: string, server: models.Server, callback: ServiceCallback<models.Server>): void;
    update(id: string, server: models.Server, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.Server>): void;


    /**
     * @summary Delete a server
     *
     * Permanently deletes a server. This operation cannot be undone. Also deletes
     * all emails and associated attachments within the server.
     *
     * @param {string} id The identifier of the server to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @returns {Promise} A promise is returned
     *
     * @resolve {HttpOperationResponse<null>} - The deserialized result object.
     *
     * @reject {Error|ServiceError} - The error object.
     */
    deleteMethodWithHttpOperationResponse(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

    /**
     * @summary Delete a server
     *
     * Permanently deletes a server. This operation cannot be undone. Also deletes
     * all emails and associated attachments within the server.
     *
     * @param {string} id The identifier of the server to be deleted.
     *
     * @param {object} [options] Optional Parameters.
     *
     * @param {object} [options.customHeaders] Headers that will be added to the
     * request
     *
     * @param {ServiceCallback} [optionalCallback] - The optional callback.
     *
     * @returns {ServiceCallback|Promise} If a callback was passed as the last
     * parameter then it returns the callback else returns a Promise.
     *
     * {Promise} A promise is returned.
     *
     *                      @resolve {null} - The deserialized result object.
     *
     *                      @reject {Error|ServiceError} - The error object.
     *
     * {ServiceCallback} optionalCallback(err, result, request, response)
     *
     *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
     *
     *                      {null} [result]   - The deserialized result object if an error did not occur.
     *
     *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
     *
     *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
     */
    deleteMethod(id: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
    deleteMethod(id: string, callback: ServiceCallback<void>): void;
    deleteMethod(id: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}
